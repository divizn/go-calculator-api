definitions:
  models.CalcError:
    properties:
      message:
        example: calculation error occured
        type: string
    type: object
  models.Calculation:
    properties:
      id:
        example: 1
        type: integer
      number1:
        example: 1
        type: number
      number2:
        example: 1
        type: number
      operator:
        example: +
        type: string
      result:
        example: 2
        type: number
    required:
    - number1
    - number2
    - operator
    type: object
  models.CreateCalculationRequest:
    properties:
      number1:
        example: 1
        type: number
      number2:
        example: 1
        type: number
      operator:
        example: +
        type: string
    required:
    - number1
    - number2
    - operator
    type: object
  models.LoginResponse:
    properties:
      token:
        type: string
    type: object
  models.LoginUserRequest:
    properties:
      password:
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
  models.RegisterUserRequest:
    properties:
      password:
        minLength: 8
        type: string
      user_role:
        enum:
        - admin
        - user
        type: string
      username:
        type: string
    required:
    - password
    - user_role
    - username
    type: object
  models.UpdateCalculationRequest:
    properties:
      number1:
        example: 1
        type: number
      number2:
        example: 1
        type: number
      operator:
        example: +
        type: string
    type: object
  models.User:
    properties:
      created_at:
        type: string
      id:
        type: integer
      user_role:
        type: string
      username:
        type: string
    type: object
  models.UserError:
    properties:
      message:
        example: login/register error occured
        type: string
    type: object
info:
  contact:
    name: Repository
    url: http://github.com/divizn/go-calculator-api
  description: CRUD API that takes 2 numbers and an operand, and stores it with the
    result in a database.
  title: Calculator API
  version: "1.0"
paths:
  /calculations:
    get:
      consumes:
      - application/json
      description: Get all calculations
      operationId: get-all-calculations
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            items:
              $ref: '#/definitions/models.Calculation'
            type: array
      summary: Shows all calculations in the database
    post:
      consumes:
      - application/json
      description: Createc calculation
      operationId: create-calculation
      parameters:
      - description: request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.CreateCalculationRequest'
      produces:
      - application/json
      responses:
        "201":
          description: created
          schema:
            $ref: '#/definitions/models.Calculation'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/models.CalcError'
      summary: Creates a calculation
  /calculations/{id}:
    delete:
      consumes:
      - application/json
      description: Update calculation from given ID
      operationId: delete-calculation
      parameters:
      - description: Some ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: no content
      summary: Deletes a calculation from a given ID
    get:
      consumes:
      - application/json
      description: Get calculation by ID
      operationId: get-calculation
      parameters:
      - description: Some ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            $ref: '#/definitions/models.Calculation'
        "404":
          description: not found
          schema:
            $ref: '#/definitions/models.CalcError'
      summary: Gets a calculation from the given ID
    put:
      consumes:
      - application/json
      description: Update calculation from given ID
      operationId: update-calculation
      parameters:
      - description: Some ID
        in: path
        name: id
        required: true
        type: integer
      - description: request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.UpdateCalculationRequest'
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            $ref: '#/definitions/models.Calculation'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/models.CalcError'
      summary: Updates a calculation from a given ID
  /users/login:
    post:
      consumes:
      - application/json
      description: Authenticate user and return a JWT token
      operationId: login-user
      parameters:
      - description: request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.LoginUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: logged in
          schema:
            $ref: '#/definitions/models.LoginResponse'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/models.UserError'
        "401":
          description: unauthorized
          schema:
            $ref: '#/definitions/models.UserError'
        "500":
          description: internal server error
          schema:
            $ref: '#/definitions/models.UserError'
      summary: Login a user
  /users/register:
    post:
      consumes:
      - application/json
      description: Register a new user in the system
      operationId: register-user
      parameters:
      - description: request body
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.RegisterUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: created
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: bad request
          schema:
            $ref: '#/definitions/models.UserError'
        "500":
          description: internal server error
          schema:
            $ref: '#/definitions/models.UserError'
      summary: Register a new user
swagger: "2.0"
